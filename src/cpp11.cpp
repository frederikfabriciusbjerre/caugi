// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// caugi_distance_hd.cpp
int caugi_distance_hd(const std::vector<int>& row_ptr1, const std::vector<int>& col_ids1, const std::vector<int>& type_codes1, const std::vector<int>& row_ptr2, const std::vector<int>& col_ids2, const std::vector<int>& type_codes2);
extern "C" SEXP _caugi_caugi_distance_hd(SEXP row_ptr1, SEXP col_ids1, SEXP type_codes1, SEXP row_ptr2, SEXP col_ids2, SEXP type_codes2) {
  BEGIN_CPP11
    return cpp11::as_sexp(caugi_distance_hd(cpp11::as_cpp<cpp11::decay_t<const std::vector<int>&>>(row_ptr1), cpp11::as_cpp<cpp11::decay_t<const std::vector<int>&>>(col_ids1), cpp11::as_cpp<cpp11::decay_t<const std::vector<int>&>>(type_codes1), cpp11::as_cpp<cpp11::decay_t<const std::vector<int>&>>(row_ptr2), cpp11::as_cpp<cpp11::decay_t<const std::vector<int>&>>(col_ids2), cpp11::as_cpp<cpp11::decay_t<const std::vector<int>&>>(type_codes2)));
  END_CPP11
}
// csr_to_amat.cpp
SEXP caugi_create_amat_from_csr(const integers& row_ptr, const integers& col_ids, const integers& type_codes, std::string type);
extern "C" SEXP _caugi_caugi_create_amat_from_csr(SEXP row_ptr, SEXP col_ids, SEXP type_codes, SEXP type) {
  BEGIN_CPP11
    return cpp11::as_sexp(caugi_create_amat_from_csr(cpp11::as_cpp<cpp11::decay_t<const integers&>>(row_ptr), cpp11::as_cpp<cpp11::decay_t<const integers&>>(col_ids), cpp11::as_cpp<cpp11::decay_t<const integers&>>(type_codes), cpp11::as_cpp<cpp11::decay_t<std::string>>(type)));
  END_CPP11
}
// from_R_csr_to_csr.cpp
writable::list caugi_create_csr_from_csr(integers from, integers to, integers types, integers n_nodes_);
extern "C" SEXP _caugi_caugi_create_csr_from_csr(SEXP from, SEXP to, SEXP types, SEXP n_nodes_) {
  BEGIN_CPP11
    return cpp11::as_sexp(caugi_create_csr_from_csr(cpp11::as_cpp<cpp11::decay_t<integers>>(from), cpp11::as_cpp<cpp11::decay_t<integers>>(to), cpp11::as_cpp<cpp11::decay_t<integers>>(types), cpp11::as_cpp<cpp11::decay_t<integers>>(n_nodes_)));
  END_CPP11
}
// from_amat_to_csr.cpp
writable::list caugi_create_csr_from_amat(SEXP mat_, std::string type);
extern "C" SEXP _caugi_caugi_create_csr_from_amat(SEXP mat_, SEXP type) {
  BEGIN_CPP11
    return cpp11::as_sexp(caugi_create_csr_from_amat(cpp11::as_cpp<cpp11::decay_t<SEXP>>(mat_), cpp11::as_cpp<cpp11::decay_t<std::string>>(type)));
  END_CPP11
}
// from_dense_matrix_to_csr.cpp
writable::list caugi_create_csr_from_dense(SEXP mat_);
extern "C" SEXP _caugi_caugi_create_csr_from_dense(SEXP mat_) {
  BEGIN_CPP11
    return cpp11::as_sexp(caugi_create_csr_from_dense(cpp11::as_cpp<cpp11::decay_t<SEXP>>(mat_)));
  END_CPP11
}
// from_sparse_matrix_to_csr.cpp
writable::list caugi_create_csr_from_sparse(SEXP mat_, bool directed);
extern "C" SEXP _caugi_caugi_create_csr_from_sparse(SEXP mat_, SEXP directed) {
  BEGIN_CPP11
    return cpp11::as_sexp(caugi_create_csr_from_sparse(cpp11::as_cpp<cpp11::decay_t<SEXP>>(mat_), cpp11::as_cpp<cpp11::decay_t<bool>>(directed)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_caugi_caugi_create_amat_from_csr",   (DL_FUNC) &_caugi_caugi_create_amat_from_csr,   4},
    {"_caugi_caugi_create_csr_from_amat",   (DL_FUNC) &_caugi_caugi_create_csr_from_amat,   2},
    {"_caugi_caugi_create_csr_from_csr",    (DL_FUNC) &_caugi_caugi_create_csr_from_csr,    4},
    {"_caugi_caugi_create_csr_from_dense",  (DL_FUNC) &_caugi_caugi_create_csr_from_dense,  1},
    {"_caugi_caugi_create_csr_from_sparse", (DL_FUNC) &_caugi_caugi_create_csr_from_sparse, 2},
    {"_caugi_caugi_distance_hd",            (DL_FUNC) &_caugi_caugi_distance_hd,            6},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_caugi(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
